#pragma checksum "/home/shunjid/Documents/Project/NoResume/Views/Shared/_initHome.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b5fe673570d76feda80ff4aa1fa3bc7572fcf709"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__initHome), @"mvc.1.0.view", @"/Views/Shared/_initHome.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Shared/_initHome.cshtml", typeof(AspNetCore.Views_Shared__initHome))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/home/shunjid/Documents/Project/NoResume/Views/_ViewImports.cshtml"
using NoResume;

#line default
#line hidden
#line 2 "/home/shunjid/Documents/Project/NoResume/Views/_ViewImports.cshtml"
using NoResume.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b5fe673570d76feda80ff4aa1fa3bc7572fcf709", @"/Views/Shared/_initHome.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"30811eb6fdc7e219bf37d0f73ea0aeaac307f593", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared__initHome : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("include", "Development", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("exclude", "Development", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 5837, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("environment", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b5fe673570d76feda80ff4aa1fa3bc7572fcf7093626", async() => {
                BeginContext(35, 5788, true);
                WriteLiteral(@"
    <script type=""text/javascript"">
    var requestToCodeForces;
    var cf_api_url = 'https://codeforces.com/api/';
    var cf_handle;
    var cf_problems_attempt_solved = {};
    var cf_verdicts = {};
    
        $(document).ready(function(){
            var cfDIV = $(""#CForcesResume"");
            var gitDIV = $(""#GithubResume"");
            var uhDIV = $(""#UHuntResume"");
            cfDIV.hide();
            gitDIV.hide();
            uhDIV.hide();
            /*
            ** Initially hide div #resume
            ** Show when controller response successfully
             */
            $(""#resume"").hide();
            
            
            /*
            ** Initially hide preloader #intLoader
            ** Show when user post a form and hide again after result arrives
             */
            $(""#intLoader"").hide();
            
            
            /*
            ** On form submit, post the searched user name and
            ** Send it to /Home/Index(IFormCollection formFields)
         ");
                WriteLiteral(@"    */
            
            $(""#formDevUname"").submit(function(e){
                e.preventDefault();
                
                // Hide resume div again after a form is re-submitted
                $(""#resume"").fadeOut();
                // Show preloader on form post
                $(""#intLoader"").show();
                
                try {
                    $.post('', $('#formDevUname').serialize(), function (response) {
                        if(response === null || response === """" || response === ""null""){
                            showErrorToast(""Invalid Username"");
                        }
                        else{
                         _initBioCardDev(response[0]);
                          $(""#resume"").fadeIn();
                          
                          var WorkingProfile = response[1];
                          
                          // CodeForces Resume Maker
                          if(WorkingProfile.codeforcesUsername != null){
                          ");
                WriteLiteral(@"    cf_handle = WorkingProfile.codeforcesUsername;
                              requestToCodeForces = $.get(cf_api_url + 'user.status', { handle : cf_handle }, function(data, status) {
                                if(data.result.length < 1){
                                    showErrorToast(""No Submissions on CodeForces"");
                                }else{
                                    CodeForcesDataProcessor(data);
                                }
                              })
                          }
                          
                          // GitHub Resume Maker
                          if(WorkingProfile.githubUsername != null){
                                
                          }
                          
                          // UVA Resume Maker
                          if(WorkingProfile.uhuntUsername != null){
                                  
                          }
                         
                        }
                        
      ");
                WriteLiteral(@"                  $(""#intLoader"").hide();
                    });  
                }
                catch (e) {
                  showErrorToast(""Invalid Username"");
                  $(""#intLoader"").hide();
                }
            });        
        });
     
     function CodeForcesDataProcessor(data){
         
         for(var i = 0; i < data.result.length ; i++) {
           var submission = data.result[i];
           
           /*
           ** #problemId : Concatenates contestId (1110) and submissionID (A)
           ** Example    : 1110-A
           **
           ** cf_problems_attempt_solved[problemId] is checked firstly if it is defined or, not
           ** if cf_problems_attempt_solved[problemId] is not defined then attempt is set to 1
           ** and solved is set to 0
           **
           ** else it will be counting till the problem is solved
           ** the goal is to count how many attempts was taken before solved 
           */
           var problemId = submission.problem.c");
                WriteLiteral(@"ontestId + '-' + submission.problem.index;
           
           if(cf_problems_attempt_solved[problemId] === undefined){
               cf_problems_attempt_solved[problemId] = {
                 attempts : 1,
                 solved : 0  
               };
           } else{
              if(cf_problems_attempt_solved[problemId].solved === 0){
                  cf_problems_attempt_solved[problemId].attempts++; 
              } 
           }
           console.log(cf_problems_attempt_solved);
           
         } 
     }
                
    function _initBioCardDev(response) {
      var _DevUsername = $('#_DeveloperName');
      var _DevCurrentCity = """";
      """"!==response.currentCity?_DevCurrentCity=response.currentCity:_DevCurrentCity=""CodeStagram"";
      _DevUsername.text(toTitleCase($('#developerUsername').val())+""(""+_DevCurrentCity+"")"");
      
      if(response.shortDescription !== """"){
          $('#_DeveloperDescription').html(response.shortDescription);
      }else{
          $('#_DeveloperDescr");
                WriteLiteral(@"iption').html(""Hey, there. I am focusing on Programming !"");
      }
      
      if(response.isAvailableForJob){
          $('#_DeveloperJobConfirmation').text(""Available"");
      }else{
          $('#_DeveloperJobConfirmation').text(""Not Available"");
      }
    }   
        
     function showErrorToast(message) {
       M.toast({
         html: message,
         classes: 'red darken-1 rounded'
       });
     }   
        
    function toTitleCase(str) {
        return str.replace(
            /\w\S*/g,
            function(txt) {
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            }
        );
    }
    </script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper.Include = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(5837, 3, true);
            WriteLiteral("\n\n\n");
            EndContext();
            BeginContext(5840, 2307, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("environment", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b5fe673570d76feda80ff4aa1fa3bc7572fcf70911022", async() => {
                BeginContext(5875, 2258, true);
                WriteLiteral(@"
    <script type=""text/javascript"">
        $(document).ready(function(){
            
            $(""#resume"").hide();
            $(""#intLoader"").hide();
            
            $(""#formDevUname"").submit(function(e){
                e.preventDefault();
                $(""#resume"").hide();
                $(""#intLoader"").show();
                
                try {
                    $.post('', $('#formDevUname').serialize(), function (response) {
                        if(response === null || response === """" || response === ""null""){
                            showErrorToast(""Invalid Username"");
                        }
                        else{
                         _initBioCardDev(response[0]);
                          $(""#resume"").show();   
                        }
                        $(""#intLoader"").hide();
                    });  
                }
                catch (e) {
                  showErrorToast(""Invalid Username"");
                  $(""#intLoader"").hide();
          ");
                WriteLiteral(@"      }
            });        
        });
        
    function _initBioCardDev(response) {
      var _DevUsername = $('#_DeveloperName');
      var _DevCurrentCity = """";
      """"!==response.currentCity?_DevCurrentCity=response.currentCity:_DevCurrentCity=""CodeStagram"";
      _DevUsername.text(toTitleCase($('#developerUsername').val())+""(""+_DevCurrentCity+"")"");
      
      if(response.shortDescription !== """"){
          $('#_DeveloperDescription').html(response.shortDescription);
      }else{
          $('#_DeveloperDescription').html(""Hey, there. I am focusing on Programming !"");
      }
      
      if(response.isAvailableForJob){
          $('#_DeveloperJobConfirmation').text(""Available"");
      }else{
          $('#_DeveloperJobConfirmation').text(""Not Available"");
      }
      
      console.log(response);
    }   
        
     function showErrorToast(message) {
       M.toast({
         html: message,
         classes: 'red darken-1 rounded'
       });
     }   
        
    function toTitleCase(st");
                WriteLiteral("r) {\n        return str.replace(\n            /\\w\\S*/g,\n            function(txt) {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            }\n        );\n    }\n    </script>\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper.Exclude = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
