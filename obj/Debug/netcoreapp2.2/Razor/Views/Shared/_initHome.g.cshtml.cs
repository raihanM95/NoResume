#pragma checksum "/home/shunjid/Documents/Project/NoResume/Views/Shared/_initHome.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e6a26573ba0a55cca8dcc0f888a2b256e11b3963"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__initHome), @"mvc.1.0.view", @"/Views/Shared/_initHome.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Shared/_initHome.cshtml", typeof(AspNetCore.Views_Shared__initHome))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/home/shunjid/Documents/Project/NoResume/Views/_ViewImports.cshtml"
using NoResume;

#line default
#line hidden
#line 2 "/home/shunjid/Documents/Project/NoResume/Views/_ViewImports.cshtml"
using NoResume.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e6a26573ba0a55cca8dcc0f888a2b256e11b3963", @"/Views/Shared/_initHome.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"30811eb6fdc7e219bf37d0f73ea0aeaac307f593", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared__initHome : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", "~/chartjs/chart.min.js", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("include", "Development", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("exclude", "Development", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 10987, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("environment", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e6a26573ba0a55cca8dcc0f888a2b256e11b39634224", async() => {
                BeginContext(35, 5, true);
                WriteLiteral("\n    ");
                EndContext();
                BeginContext(40, 72, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e6a26573ba0a55cca8dcc0f888a2b256e11b39634607", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper.Src = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
#line 2 "/home/shunjid/Documents/Project/NoResume/Views/Shared/_initHome.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper.AppendVersion = true;

#line default
#line hidden
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-append-version", __Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper.AppendVersion, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(112, 7481, true);
                WriteLiteral(@"
    
    <script type=""text/javascript"">
    var colorArray = ['#00bfa5','#0288d1','#00695c','#ffcc80','#ec407a','#4a148c','#f4511e','#6d4c41','#424242','#ef5350','#66bb6a','#ffe082'];
    Chart.defaults.global.defaultFontColor = ""#fff"";
    Chart.defaults.global.defaultFontFamily = ""'Quicksand'"";
    
    
    var requestToCodeForces;
    var cf_api_url = 'https://codeforces.com/api/';
    var cf_handle;
    var cf_problems_attempt_solved = {};
    var cf_verdicts = {};
    var cf_languages = {};
    var cf_tags = {};
    var cf_attempt_level_quality = {};
    var cf_attempt_rating_quality = {};
    
    
        $(document).ready(function(){
            var cfDIV = $(""#CForcesResume"");
            var gitDIV = $(""#GithubResume"");
            var uhDIV = $(""#UHuntResume"");
            cfDIV.hide();
            gitDIV.hide();
            uhDIV.hide();
            
            var cfPreload = $('#CForcesPreloader');
            cfPreload.hide();
            /*
            ** Initially hide div #resume
       ");
                WriteLiteral(@"     ** Show when controller response successfully
             */
            $(""#resume"").hide();
            
            
            /*
            ** Initially hide preloader #intLoader
            ** Show when user post a form and hide again after result arrives
             */
            $(""#intLoader"").hide();
            
            
            /*
            ** On form submit, post the searched user name and
            ** Send it to /Home/Index(IFormCollection formFields)
             */
            
            $(""#formDevUname"").submit(function(e){
                e.preventDefault();
                
                // Hide resume div again after a form is re-submitted
                $(""#resume"").fadeOut();
                // Show preloader on form post
                $(""#intLoader"").show();
                
                try {
                    $.post('', $('#formDevUname').serialize(), function (response) {
                        if(response === null || response === """" || response ==");
                WriteLiteral(@"= ""null""){
                            showErrorToast(""Invalid Username"");
                        }
                        else{
                         _initBioCardDev(response[0]);
                          $(""#resume"").fadeIn();
                          cfPreload.show();
                          
                          var WorkingProfile = response[1];
                          
                          // CodeForces Resume Maker
                          if(WorkingProfile.codeforcesUsername != null){
                              cf_handle = WorkingProfile.codeforcesUsername;
                              requestToCodeForces = $.get(cf_api_url + 'user.status', { handle : cf_handle }, function(data, status) {
                                if(data.result.length < 1){
                                    showErrorToast(""No Submissions on CodeForces"");
                                }else{
                                    CodeForcesDataProcessor(data);
                                    
      ");
                WriteLiteral(@"                              // Set Pie Chart : VERDICT
                                    var verdictDataArray = $.map(cf_verdicts,function(v){ return v; });
                                    CodeForcesCreateCharts(Object.keys(cf_verdicts), verdictDataArray, 'pie', $('#verdicts_codeForces_pie'), 'Verdicts of '+cf_handle);
                                    
                                    // Set Doughnut Chart : Languages
                                    var languageDataArray = $.map(cf_languages,function(v){ return v; });
                                    CodeForcesCreateCharts(Object.keys(cf_languages), languageDataArray, 'doughnut', $('#languages_codeForces_pie'), 'Languages used by '+cf_handle);
                                    
                                    cfDIV.show();
                                }
                                cfPreload.hide();
                              })
                          }
                          
                          // GitHub Resum");
                WriteLiteral(@"e Maker
                          if(WorkingProfile.githubUsername != null){
                                
                          }
                          
                          // UVA Resume Maker
                          if(WorkingProfile.uhuntUsername != null){
                                  
                          }
                         
                        }
                        
                        $(""#intLoader"").hide();
                    });  
                }
                catch (e) {
                  showErrorToast(""Invalid Username"");
                  $(""#intLoader"").hide();
                }
            });        
        });
     
     function CodeForcesDataProcessor(data){
         
         for(var i = 0; i < data.result.length ; i++) {
           var submission = data.result[i];
           
           /*
           ** #problemId : Concatenates contestId (1110) and submissionID (A)
           ** Example    : 1110-A
           **
           ** cf_probl");
                WriteLiteral(@"ems_attempt_solved[problemId] is checked firstly if it is defined or, not
           ** if cf_problems_attempt_solved[problemId] is not defined then attempt is set to 1
           ** and solved is set to 0
           **
           ** else it will be counting till the problem is solved
           ** the goal is to count how many attempts was taken before solved 
           */
           var problemId = submission.problem.contestId + '-' + submission.problem.index;
           
           if(cf_problems_attempt_solved[problemId] === undefined){
               cf_problems_attempt_solved[problemId] = {
                 attempts : 1,
                 solved : 0  
               };
           } else{
              if(cf_problems_attempt_solved[problemId].solved === 0){
                  cf_problems_attempt_solved[problemId].attempts++; 
              } 
           }
           
           /*
           ** #VERDICTS COUNTER
           ** 
           ** Counting number of each type of verdicts 
           ** Example: ");
                WriteLiteral(@"OK , COMPILATION_ERROR , MEMORY_LIMIT_EXCEEDED
            */
           if(cf_verdicts[submission.verdict] === undefined){
               cf_verdicts[submission.verdict] = 1;
           } else{
               cf_verdicts[submission.verdict]++;
           }
           
           /*
           ** #Language COUNTER 
           * 
           ** Counting number of each type of languages
           ** Example: C++, Java, Kotlin
           */
           if(cf_languages[submission.programmingLanguage] === undefined){
               cf_languages[submission.programmingLanguage] = 1;
           } else{
               cf_languages[submission.programmingLanguage]++;
           }
           
           
           /*
           ** #Counting Solved : HOW_MANY_WAYS
           ** It means number of times a problem is solved according to VERDICT == OK
           ** 
           ** It will increment cf_problems_attempt_solved[problemID].solved
           */
           if(submission.verdict === 'OK'){
               cf_problems");
                WriteLiteral(@"_attempt_solved[problemId].solved++;
           }
           
           // Counting Tags, levels, Problem Rating at MIN[SOLVED]
           if(submission.verdict === 'OK' && cf_problems_attempt_solved[problemId].solved === 1){
               /*
               ** Counting Tags
               ** solved is counted ");
                EndContext();
                BeginContext(7594, 3379, true);
                WriteLiteral(@"@1 because
               ** if someone solves a problem so many times then we can take only one tag
               **/
               submission.problem.tags.forEach(function(currentValue) {
                 if(cf_tags[currentValue] === undefined){
                     cf_tags[currentValue] = 1;
                 }else{
                     cf_tags[currentValue]++;
                 }
               });
               
               // Level of quality problems being tried : A, B, B1 
               if(cf_attempt_level_quality[submission.problem.index] === undefined){
                   cf_attempt_level_quality[submission.problem.index] = 1;
               }else{
                   cf_attempt_level_quality[submission.problem.index]++;
               }
               
               // Level of rating of problems being tried : 2100, 1500
               if(cf_attempt_rating_quality[submission.problem.rating] === undefined){
                 cf_attempt_rating_quality[submission.problem.rating] = 1;  
           ");
                WriteLiteral(@"    } else{
                   cf_attempt_rating_quality[submission.problem.rating]++;
               }
               delete cf_attempt_rating_quality.undefined;
               
           }
           
         } 
         // console.log(cf_problems_attempt_solved);
         // console.log(cf_verdicts);
         // console.log(cf_languages);
         // console.log(cf_problems_attempt_solved);
         // console.log(cf_tags);
         // console.log(cf_attempt_level_quality);
         // console.log(cf_attempt_rating_quality);
     }
     
     function CodeForcesCreateCharts(keys, dataArray, chartType, context, titleText) {
       var pieChart = new Chart(context, {
           type: chartType,
           data: {
               labels: keys,
               datasets: [{
                   label: 'Value',
                   data: dataArray,
                   backgroundColor: colorArray,
                   borderColor: colorArray,
                   borderWidth: 1
               }]
           },
           o");
                WriteLiteral(@"ptions: {
             title: {
               display: true,
               text: titleText,
               fontSize: 25
             } 
           }
       });
     }
                
    function _initBioCardDev(response) {
      var _DevUsername = $('#_DeveloperName');
      var _DevCurrentCity = """";
      """"!==response.currentCity?_DevCurrentCity=response.currentCity:_DevCurrentCity=""CodeStagram"";
      _DevUsername.text(toTitleCase($('#developerUsername').val())+""(""+_DevCurrentCity+"")"");
      
      if(response.shortDescription !== """"){
          $('#_DeveloperDescription').html(response.shortDescription);
      }else{
          $('#_DeveloperDescription').html(""Hey, there. I am focusing on Programming !"");
      }
      
      if(response.isAvailableForJob){
          $('#_DeveloperJobConfirmation').text(""Available"");
      }else{
          $('#_DeveloperJobConfirmation').text(""Not Available"");
      }
    }   
        
     function showErrorToast(message) {
       M.toast({
         html: message,
 ");
                WriteLiteral(@"        classes: 'red darken-1 rounded'
       });
     }   
        
    function toTitleCase(str) {
        return str.replace(
            /\w\S*/g,
            function(txt) {
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            }
        );
    }
    </script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper.Include = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(10987, 3, true);
            WriteLiteral("\n\n\n");
            EndContext();
            BeginContext(10990, 2307, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("environment", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e6a26573ba0a55cca8dcc0f888a2b256e11b396319020", async() => {
                BeginContext(11025, 2258, true);
                WriteLiteral(@"
    <script type=""text/javascript"">
        $(document).ready(function(){
            
            $(""#resume"").hide();
            $(""#intLoader"").hide();
            
            $(""#formDevUname"").submit(function(e){
                e.preventDefault();
                $(""#resume"").hide();
                $(""#intLoader"").show();
                
                try {
                    $.post('', $('#formDevUname').serialize(), function (response) {
                        if(response === null || response === """" || response === ""null""){
                            showErrorToast(""Invalid Username"");
                        }
                        else{
                         _initBioCardDev(response[0]);
                          $(""#resume"").show();   
                        }
                        $(""#intLoader"").hide();
                    });  
                }
                catch (e) {
                  showErrorToast(""Invalid Username"");
                  $(""#intLoader"").hide();
          ");
                WriteLiteral(@"      }
            });        
        });
        
    function _initBioCardDev(response) {
      var _DevUsername = $('#_DeveloperName');
      var _DevCurrentCity = """";
      """"!==response.currentCity?_DevCurrentCity=response.currentCity:_DevCurrentCity=""CodeStagram"";
      _DevUsername.text(toTitleCase($('#developerUsername').val())+""(""+_DevCurrentCity+"")"");
      
      if(response.shortDescription !== """"){
          $('#_DeveloperDescription').html(response.shortDescription);
      }else{
          $('#_DeveloperDescription').html(""Hey, there. I am focusing on Programming !"");
      }
      
      if(response.isAvailableForJob){
          $('#_DeveloperJobConfirmation').text(""Available"");
      }else{
          $('#_DeveloperJobConfirmation').text(""Not Available"");
      }
      
      console.log(response);
    }   
        
     function showErrorToast(message) {
       M.toast({
         html: message,
         classes: 'red darken-1 rounded'
       });
     }   
        
    function toTitleCase(st");
                WriteLiteral("r) {\n        return str.replace(\n            /\\w\\S*/g,\n            function(txt) {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            }\n        );\n    }\n    </script>\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper.Exclude = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
